const ethers = require("ethers");
const fs = require("fs-extra");

require("dotenv").config();

const main = async () => {
  // REMOTE PROCEDURE CALL - BASICALLY THE LOCATION
  // http://127.0.0.1:7545

  // CREATE NEW PROVIDER (GANACHE FAKE LOCAL BLOCKCHAIN)
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

  // CREATE NEW WALLET USING A PRIVATE KEY AND THE PROVIDER
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  // READ THE ABI AND BINARY FOR THE CONTRACT
  const abi = fs.readFileSync(
    "./output/SimpleStorage_sol_SimpleStorage.abi",
    "utf-8"
  );
  const binary = fs.readFileSync(
    "./output/SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );

  // CREATE A CONTRACT FACTORY
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying, please wait...");

  // DEPLOY CONTRACT
  const contract = await contractFactory.deploy({
    // YOU CAN SPECIFY THINGS LIKE GAS LIMIT AND PRICE
    // gasPrice: 1000000
  });
  //NOT COMPULSORY: WAITS FOR ONE BLOCK CONFIRMATION BEFORE LOGGING THE CONTRACT
  await contract.deployTransaction.wait(1);
  //   console.log("DEPLOYMENT TRANSACTION: ", contract);
  console.log(`contract address: ${contract.address}`);

  //   // SENDING TRANSACTION THROUGH PURE JAVASCRIPT
  //   console.log("Deploying with only transaction data");
  //   const nonce = await wallet.getTransactionCount();

  //   const tx = {
  //     nonce,
  //     gasPrice: 20000000000,
  //     gasLimit: 1000000,
  //     to: null,
  //     value: 0,
  //     data: "0x608060405234801561001057600080fd5b50610c7e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636057361d116100665780636057361d146101225780637313e8dd1461013e57806390c3ee4d1461015a5780639e7a13ad1461018a578063ef01a9a8146101bb57610093565b8063134f5922146100985780632e64cec1146100b657806335c930ec146100d457806343ede4ae14610104575b600080fd5b6100a06101eb565b6040516100ad9190610476565b60405180910390f35b6100be6101f4565b6040516100cb9190610476565b60405180910390f35b6100ee60048036038101906100e991906105eb565b6101fd565b6040516100fb91906106b3565b60405180910390f35b61010c61020f565b6040516101199190610476565b60405180910390f35b61013c60048036038101906101379190610701565b610215565b005b61015860048036038101906101539190610767565b61021f565b005b610174600480360381019061016f91906105eb565b6102dc565b60405161018191906107d2565b60405180910390f35b6101a4600480360381019061019f9190610701565b610312565b6040516101b29291906107ed565b60405180910390f35b6101d560048036038101906101d0919061081d565b6103db565b6040516101e291906108b0565b60405180910390f35b60008054905090565b60008054905090565b606061020882610434565b9050919050565b60005481565b8060008190555050565b600060405180604001604052808481526020018360ff1681525090506001819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161027c9190610ad7565b5060208201518160010160006101000a81548160ff021916908360ff1602179055505050816002846040516102b19190610be5565b908152602001604051809103902060006101000a81548160ff021916908360ff160217905550505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6001818154811061032257600080fd5b9060005260206000209060020201600091509050806000018054610345906108fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610371906108fa565b80156103be5780601f10610393576101008083540402835291602001916103be565b820191906000526020600020905b8154815290600101906020018083116103a157829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b6000816040516020016103ee9190610be5565b60405160208183030381529060405280519060200120836040516020016104159190610be5565b6040516020818303038152906040528051906020012014905092915050565b6060816040516020016104479190610c22565b6040516020818303038152906040529050919050565b6000819050919050565b6104708161045d565b82525050565b600060208201905061048b6000830184610467565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f8826104af565b810181811067ffffffffffffffff82111715610517576105166104c0565b5b80604052505050565b600061052a610491565b905061053682826104ef565b919050565b600067ffffffffffffffff821115610556576105556104c0565b5b61055f826104af565b9050602081019050919050565b82818337600083830152505050565b600061058e6105898461053b565b610520565b9050828152602081018484840111156105aa576105a96104aa565b5b6105b584828561056c565b509392505050565b600082601f8301126105d2576105d16104a5565b5b81356105e284826020860161057b565b91505092915050565b6000602082840312156106015761060061049b565b5b600082013567ffffffffffffffff81111561061f5761061e6104a0565b5b61062b848285016105bd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561066e578082015181840152602081019050610653565b60008484015250505050565b600061068582610634565b61068f818561063f565b935061069f818560208601610650565b6106a8816104af565b840191505092915050565b600060208201905081810360008301526106cd818461067a565b905092915050565b6106de8161045d565b81146106e957600080fd5b50565b6000813590506106fb816106d5565b92915050565b6000602082840312156107175761071661049b565b5b6000610725848285016106ec565b91505092915050565b600060ff82169050919050565b6107448161072e565b811461074f57600080fd5b50565b6000813590506107618161073b565b92915050565b6000806040838503121561077e5761077d61049b565b5b600083013567ffffffffffffffff81111561079c5761079b6104a0565b5b6107a8858286016105bd565b92505060206107b985828601610752565b9150509250929050565b6107cc8161072e565b82525050565b60006020820190506107e760008301846107c3565b92915050565b60006040820190508181036000830152610807818561067a565b905061081660208301846107c3565b9392505050565b600080604083850312156108345761083361049b565b5b600083013567ffffffffffffffff811115610852576108516104a0565b5b61085e858286016105bd565b925050602083013567ffffffffffffffff81111561087f5761087e6104a0565b5b61088b858286016105bd565b9150509250929050565b60008115159050919050565b6108aa81610895565b82525050565b60006020820190506108c560008301846108a1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061091257607f821691505b602082108103610925576109246108cb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261098d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610950565b6109978683610950565b95508019841693508086168417925050509392505050565b6000819050919050565b60006109d46109cf6109ca8461045d565b6109af565b61045d565b9050919050565b6000819050919050565b6109ee836109b9565b610a026109fa826109db565b84845461095d565b825550505050565b600090565b610a17610a0a565b610a228184846109e5565b505050565b5b81811015610a4657610a3b600082610a0f565b600181019050610a28565b5050565b601f821115610a8b57610a5c8161092b565b610a6584610940565b81016020851015610a74578190505b610a88610a8085610940565b830182610a27565b50505b505050565b600082821c905092915050565b6000610aae60001984600802610a90565b1980831691505092915050565b6000610ac78383610a9d565b9150826002028217905092915050565b610ae082610634565b67ffffffffffffffff811115610af957610af86104c0565b5b610b0382546108fa565b610b0e828285610a4a565b600060209050601f831160018114610b415760008415610b2f578287015190505b610b398582610abb565b865550610ba1565b601f198416610b4f8661092b565b60005b82811015610b7757848901518255600182019150602085019450602081019050610b52565b86831015610b945784890151610b90601f891682610a9d565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000610bbf82610634565b610bc98185610ba9565b9350610bd9818560208601610650565b80840191505092915050565b6000610bf18284610bb4565b915081905092915050565b7f48656c6c6f200000000000000000000000000000000000000000000000000000815250565b6000610c2d82610bfc565b600682019150610c3d8284610bb4565b91508190509291505056fea264697066735822122013e06737ba0d0a0cbe5b000789fdf178ceedc186c4ad4a95cd74a46a8f64884a64736f6c63430008110033",
  //     // Network ID
  //     chainId: 1337,
  //   };

  //   const sentTxResponse = await wallet.sendTransaction(tx);
  //   await sentTxResponse.wait(1);
  //   console.log(sentTxResponse);

  const currentFavouriteNumber = await contract.retrieve();
  console.log(
    `current favourite number is ${currentFavouriteNumber.toString()}`
  );
  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedFavouriteNumber = await contract.retrieve();
  console.log(
    `updated favourite number is ${updatedFavouriteNumber.toString()}`
  );
};

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
